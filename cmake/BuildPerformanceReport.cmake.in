# BuildPerformanceReport.cmake.in - Build performance monitoring and reporting
# This script generates comprehensive build performance reports

cmake_minimum_required(VERSION 3.15)

# Build information
set(PROJECT_NAME "@PROJECT_NAME@")
set(PROJECT_VERSION "@PROJECT_VERSION@")
set(CMAKE_BUILD_TYPE "@CMAKE_BUILD_TYPE@")
set(CMAKE_CXX_COMPILER_ID "@CMAKE_CXX_COMPILER_ID@")
set(CMAKE_CXX_COMPILER_VERSION "@CMAKE_CXX_COMPILER_VERSION@")
set(BUILD_START_TIME "@HYDROGEN_BUILD_START_TIME@")

# Get current time for build duration calculation
string(TIMESTAMP BUILD_END_TIME "%s")
math(EXPR BUILD_DURATION "${BUILD_END_TIME} - ${BUILD_START_TIME}")

# Convert duration to human-readable format
math(EXPR BUILD_MINUTES "${BUILD_DURATION} / 60")
math(EXPR BUILD_SECONDS "${BUILD_DURATION} % 60")

# System information
cmake_host_system_information(RESULT HOSTNAME QUERY HOSTNAME)
cmake_host_system_information(RESULT OS_NAME QUERY OS_NAME)
cmake_host_system_information(RESULT OS_RELEASE QUERY OS_RELEASE)
cmake_host_system_information(RESULT OS_VERSION QUERY OS_VERSION)
cmake_host_system_information(RESULT CPU_CORES QUERY NUMBER_OF_LOGICAL_CORES)
cmake_host_system_information(RESULT PHYSICAL_CORES QUERY NUMBER_OF_PHYSICAL_CORES)
cmake_host_system_information(RESULT TOTAL_MEMORY QUERY TOTAL_PHYSICAL_MEMORY)

# Compiler cache statistics
find_program(CCACHE_PROGRAM ccache)
if(CCACHE_PROGRAM)
    execute_process(
        COMMAND ${CCACHE_PROGRAM} --show-stats
        OUTPUT_VARIABLE CCACHE_STATS
        ERROR_QUIET
    )
endif()

find_program(SCCACHE_PROGRAM sccache)
if(SCCACHE_PROGRAM)
    execute_process(
        COMMAND ${SCCACHE_PROGRAM} --show-stats
        OUTPUT_VARIABLE SCCACHE_STATS
        ERROR_QUIET
    )
endif()

# Build artifacts information
file(GLOB_RECURSE BUILD_ARTIFACTS "@CMAKE_BINARY_DIR@/*")
list(LENGTH BUILD_ARTIFACTS ARTIFACT_COUNT)

# Calculate total build artifact size
set(TOTAL_SIZE 0)
foreach(ARTIFACT ${BUILD_ARTIFACTS})
    if(EXISTS "${ARTIFACT}" AND NOT IS_DIRECTORY "${ARTIFACT}")
        file(SIZE "${ARTIFACT}" ARTIFACT_SIZE)
        math(EXPR TOTAL_SIZE "${TOTAL_SIZE} + ${ARTIFACT_SIZE}")
    endif()
endforeach()

# Convert size to human-readable format
if(TOTAL_SIZE GREATER 1073741824)
    math(EXPR SIZE_GB "${TOTAL_SIZE} / 1073741824")
    set(READABLE_SIZE "${SIZE_GB} GB")
elseif(TOTAL_SIZE GREATER 1048576)
    math(EXPR SIZE_MB "${TOTAL_SIZE} / 1048576")
    set(READABLE_SIZE "${SIZE_MB} MB")
elseif(TOTAL_SIZE GREATER 1024)
    math(EXPR SIZE_KB "${TOTAL_SIZE} / 1024")
    set(READABLE_SIZE "${SIZE_KB} KB")
else()
    set(READABLE_SIZE "${TOTAL_SIZE} bytes")
endif()

# Generate performance report
set(REPORT_FILE "@CMAKE_BINARY_DIR@/build_performance_report.txt")
file(WRITE ${REPORT_FILE}
"================================================================================
Hydrogen Build Performance Report
================================================================================

Build Information:
  Project: ${PROJECT_NAME} ${PROJECT_VERSION}
  Build Type: ${CMAKE_BUILD_TYPE}
  Compiler: ${CMAKE_CXX_COMPILER_ID} ${CMAKE_CXX_COMPILER_VERSION}
  Build Duration: ${BUILD_MINUTES}m ${BUILD_SECONDS}s
  Generated: ${BUILD_END_TIME}

System Information:
  Hostname: ${HOSTNAME}
  OS: ${OS_NAME} ${OS_RELEASE} ${OS_VERSION}
  CPU Cores: ${CPU_CORES} logical, ${PHYSICAL_CORES} physical
  Total Memory: ${TOTAL_MEMORY} MB

Build Artifacts:
  Total Files: ${ARTIFACT_COUNT}
  Total Size: ${READABLE_SIZE}

")

# Add compiler cache statistics if available
if(CCACHE_PROGRAM AND CCACHE_STATS)
    file(APPEND ${REPORT_FILE}
"Compiler Cache (ccache):
${CCACHE_STATS}

")
endif()

if(SCCACHE_PROGRAM AND SCCACHE_STATS)
    file(APPEND ${REPORT_FILE}
"Compiler Cache (sccache):
${SCCACHE_STATS}

")
endif()

# Add build optimization recommendations
file(APPEND ${REPORT_FILE}
"Build Optimization Recommendations:
")

if(BUILD_DURATION GREATER 300)
    file(APPEND ${REPORT_FILE}
"  - Consider enabling unity builds (HYDROGEN_ENABLE_UNITY_BUILD=ON)
")
endif()

if(NOT CCACHE_PROGRAM AND NOT SCCACHE_PROGRAM)
    file(APPEND ${REPORT_FILE}
"  - Install ccache or sccache for faster rebuilds
")
endif()

if(CMAKE_BUILD_TYPE STREQUAL "Debug" AND BUILD_DURATION GREATER 180)
    file(APPEND ${REPORT_FILE}
"  - Use RelWithDebInfo for faster debug builds with optimization
")
endif()

if(CPU_CORES GREATER 4 AND NOT CMAKE_BUILD_PARALLEL_LEVEL)
    file(APPEND ${REPORT_FILE}
"  - Enable parallel builds with CMAKE_BUILD_PARALLEL_LEVEL=${CPU_CORES}
")
endif()

file(APPEND ${REPORT_FILE}
"
Performance Metrics:
  - Build Speed: ${ARTIFACT_COUNT} files in ${BUILD_DURATION}s
  - Files per Second: ")

if(BUILD_DURATION GREATER 0)
    math(EXPR FILES_PER_SECOND "${ARTIFACT_COUNT} / ${BUILD_DURATION}")
    file(APPEND ${REPORT_FILE} "${FILES_PER_SECOND}")
else()
    file(APPEND ${REPORT_FILE} "N/A (build too fast)")
endif()

file(APPEND ${REPORT_FILE}
"
  - Memory Efficiency: ${READABLE_SIZE} total artifacts
  - CPU Utilization: ${CPU_CORES} cores available

================================================================================
")

# Display report
message(STATUS "")
message(STATUS "================================================================================")
message(STATUS "Hydrogen Build Performance Report")
message(STATUS "================================================================================")
message(STATUS "Build Duration: ${BUILD_MINUTES}m ${BUILD_SECONDS}s")
message(STATUS "Build Artifacts: ${ARTIFACT_COUNT} files (${READABLE_SIZE})")
message(STATUS "System: ${OS_NAME} with ${CPU_CORES} cores")

if(BUILD_DURATION GREATER 0)
    math(EXPR FILES_PER_SECOND "${ARTIFACT_COUNT} / ${BUILD_DURATION}")
    message(STATUS "Build Speed: ${FILES_PER_SECOND} files/second")
endif()

if(CCACHE_PROGRAM)
    message(STATUS "Compiler Cache: ccache enabled")
elseif(SCCACHE_PROGRAM)
    message(STATUS "Compiler Cache: sccache enabled")
else()
    message(STATUS "Compiler Cache: not available")
endif()

message(STATUS "")
message(STATUS "Full report saved to: ${REPORT_FILE}")
message(STATUS "================================================================================")
message(STATUS "")

# Generate JSON report for CI/CD integration
set(JSON_REPORT_FILE "@CMAKE_BINARY_DIR@/build_performance.json")
file(WRITE ${JSON_REPORT_FILE}
"{
  \"project\": \"${PROJECT_NAME}\",
  \"version\": \"${PROJECT_VERSION}\",
  \"build_type\": \"${CMAKE_BUILD_TYPE}\",
  \"compiler\": {
    \"id\": \"${CMAKE_CXX_COMPILER_ID}\",
    \"version\": \"${CMAKE_CXX_COMPILER_VERSION}\"
  },
  \"duration\": {
    \"seconds\": ${BUILD_DURATION},
    \"minutes\": ${BUILD_MINUTES},
    \"human_readable\": \"${BUILD_MINUTES}m ${BUILD_SECONDS}s\"
  },
  \"system\": {
    \"hostname\": \"${HOSTNAME}\",
    \"os\": \"${OS_NAME} ${OS_RELEASE}\",
    \"cpu_cores\": ${CPU_CORES},
    \"physical_cores\": ${PHYSICAL_CORES},
    \"total_memory_mb\": ${TOTAL_MEMORY}
  },
  \"artifacts\": {
    \"count\": ${ARTIFACT_COUNT},
    \"total_size_bytes\": ${TOTAL_SIZE},
    \"human_readable_size\": \"${READABLE_SIZE}\"
  },
  \"performance\": {
")

if(BUILD_DURATION GREATER 0)
    math(EXPR FILES_PER_SECOND "${ARTIFACT_COUNT} / ${BUILD_DURATION}")
    file(APPEND ${JSON_REPORT_FILE}
"    \"files_per_second\": ${FILES_PER_SECOND},")
else()
    file(APPEND ${JSON_REPORT_FILE}
"    \"files_per_second\": null,")
endif()

file(APPEND ${JSON_REPORT_FILE}
"    \"compiler_cache\": ")

if(CCACHE_PROGRAM)
    file(APPEND ${JSON_REPORT_FILE} "\"ccache\"")
elseif(SCCACHE_PROGRAM)
    file(APPEND ${JSON_REPORT_FILE} "\"sccache\"")
else()
    file(APPEND ${JSON_REPORT_FILE} "null")
endif()

file(APPEND ${JSON_REPORT_FILE}
"
  },
  \"timestamp\": ${BUILD_END_TIME}
}
")

message(STATUS "JSON report saved to: ${JSON_REPORT_FILE}")
