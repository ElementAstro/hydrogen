# HydrogenExport.cmake - Comprehensive target export and import mechanisms
# This module provides enhanced target export/import functionality with proper
# config files, version handling, and dependency propagation for package consumption.

cmake_minimum_required(VERSION 3.15)

# Include guard
if(HYDROGEN_EXPORT_INCLUDED)
    return()
endif()
set(HYDROGEN_EXPORT_INCLUDED TRUE)

# Include required modules
include(CMakePackageConfigHelpers)
include(GNUInstallDirs)

# =============================================================================
# Export Configuration
# =============================================================================

# Configure export settings for the project
function(hydrogen_configure_exports)
    # Set export variables
    set(HYDROGEN_EXPORT_NAME "Hydrogen" CACHE STRING "Main export name")
    set(HYDROGEN_CONFIG_INSTALL_DIR "${CMAKE_INSTALL_LIBDIR}/cmake/${HYDROGEN_EXPORT_NAME}" CACHE STRING "Config install directory")
    set(HYDROGEN_NAMESPACE "Hydrogen::" CACHE STRING "Target namespace")

    # Propagate to parent scope
    set(HYDROGEN_EXPORT_NAME "${HYDROGEN_EXPORT_NAME}" PARENT_SCOPE)
    set(HYDROGEN_CONFIG_INSTALL_DIR "${HYDROGEN_CONFIG_INSTALL_DIR}" PARENT_SCOPE)
    set(HYDROGEN_NAMESPACE "${HYDROGEN_NAMESPACE}" PARENT_SCOPE)

    # Create export directory
    file(MAKE_DIRECTORY "${CMAKE_CURRENT_BINARY_DIR}/cmake")

    message(STATUS "Hydrogen: Export configuration complete")
    message(STATUS "  - Export name: ${HYDROGEN_EXPORT_NAME}")
    message(STATUS "  - Namespace: ${HYDROGEN_NAMESPACE}")
    message(STATUS "  - Config dir: ${HYDROGEN_CONFIG_INSTALL_DIR}")
endfunction()

# =============================================================================
# Target Export Utilities
# =============================================================================

# Export a target with comprehensive configuration
function(hydrogen_export_target target_name)
    set(options INTERFACE_TARGET)
    set(oneValueArgs EXPORT_NAME COMPONENT)
    set(multiValueArgs PUBLIC_HEADERS DEPENDENCIES)
    cmake_parse_arguments(ARG "${options}" "${oneValueArgs}" "${multiValueArgs}" ${ARGN})
    
    # Set default export name
    if(NOT ARG_EXPORT_NAME)
        set(ARG_EXPORT_NAME ${target_name})
    endif()
    
    # Set default component
    if(NOT ARG_COMPONENT)
        set(ARG_COMPONENT "Runtime")
    endif()
    
    # Configure target properties for export
    set_target_properties(${target_name} PROPERTIES
        EXPORT_NAME ${ARG_EXPORT_NAME}
        VERSION ${PROJECT_VERSION}
        SOVERSION ${PROJECT_VERSION_MAJOR}
    )
    
    # Install the target
    install(TARGETS ${target_name}
        EXPORT ${HYDROGEN_EXPORT_NAME}Targets
        COMPONENT ${ARG_COMPONENT}
        LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}
            COMPONENT ${ARG_COMPONENT}
            NAMELINK_COMPONENT Development
        ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR}
            COMPONENT Development
        RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR}
            COMPONENT ${ARG_COMPONENT}
        INCLUDES DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}
    )
    
    # Install public headers if specified
    if(ARG_PUBLIC_HEADERS)
        install(FILES ${ARG_PUBLIC_HEADERS}
            DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}
            COMPONENT Development
        )
    endif()
    
    # Store target information for config generation
    get_property(exported_targets GLOBAL PROPERTY HYDROGEN_EXPORTED_TARGETS)
    if(NOT exported_targets)
        set(exported_targets "")
    endif()
    list(APPEND exported_targets ${target_name})
    set_property(GLOBAL PROPERTY HYDROGEN_EXPORTED_TARGETS "${exported_targets}")
    
    # Store target metadata
    set_property(GLOBAL PROPERTY HYDROGEN_TARGET_${target_name}_EXPORT_NAME ${ARG_EXPORT_NAME})
    set_property(GLOBAL PROPERTY HYDROGEN_TARGET_${target_name}_DEPENDENCIES "${ARG_DEPENDENCIES}")
    set_property(GLOBAL PROPERTY HYDROGEN_TARGET_${target_name}_COMPONENT ${ARG_COMPONENT})
    
    message(STATUS "Hydrogen: Exported target ${target_name} as ${HYDROGEN_NAMESPACE}${ARG_EXPORT_NAME}")
endfunction()

# =============================================================================
# Config File Generation
# =============================================================================

# Generate the main package config file
function(hydrogen_generate_config_file)
    set(config_file "${CMAKE_CURRENT_BINARY_DIR}/cmake/${HYDROGEN_EXPORT_NAME}Config.cmake")
    
    # Get all exported targets
    get_property(exported_targets GLOBAL PROPERTY HYDROGEN_EXPORTED_TARGETS)
    
    # Generate config file content
    file(WRITE ${config_file}
        "# ${HYDROGEN_EXPORT_NAME} Package Configuration File\n"
        "# Generated by Hydrogen build system\n"
        "\n"
        "@PACKAGE_INIT@\n"
        "\n"
        "# Package information\n"
        "set(${HYDROGEN_EXPORT_NAME}_VERSION \"@PROJECT_VERSION@\")\n"
        "set(${HYDROGEN_EXPORT_NAME}_VERSION_MAJOR \"@PROJECT_VERSION_MAJOR@\")\n"
        "set(${HYDROGEN_EXPORT_NAME}_VERSION_MINOR \"@PROJECT_VERSION_MINOR@\")\n"
        "set(${HYDROGEN_EXPORT_NAME}_VERSION_PATCH \"@PROJECT_VERSION_PATCH@\")\n"
        "\n"
        "# CMake version requirement\n"
        "cmake_minimum_required(VERSION 3.15)\n"
        "\n"
        "# Include helper modules\n"
        "include(CMakeFindDependencyMacro)\n"
        "\n"
        "# Find required dependencies\n"
    )
    
    # Add dependency finding logic
    file(APPEND ${config_file}
        "# Core dependencies\n"
        "find_dependency(Threads REQUIRED)\n"
        "find_dependency(nlohmann_json REQUIRED)\n"
        "\n"
        "# Optional dependencies based on features\n"
        "if(@HYDROGEN_HAS_SSL@)\n"
        "    find_dependency(OpenSSL REQUIRED)\n"
        "endif()\n"
        "\n"
        "if(@HYDROGEN_HAS_COMPRESSION@)\n"
        "    find_dependency(ZLIB REQUIRED)\n"
        "endif()\n"
        "\n"
        "if(@HYDROGEN_HAS_HTTP_SERVER@)\n"
        "    find_dependency(Crow REQUIRED)\n"
        "endif()\n"
        "\n"
        "if(@HYDROGEN_HAS_WEBSOCKETS@ OR @HYDROGEN_HAS_HTTP_SERVER@)\n"
        "    find_dependency(Boost REQUIRED COMPONENTS system filesystem thread)\n"
        "endif()\n"
        "\n"
        "if(@HYDROGEN_HAS_PYTHON_BINDINGS@)\n"
        "    find_dependency(pybind11 REQUIRED)\n"
        "    find_dependency(Python REQUIRED COMPONENTS Interpreter Development)\n"
        "endif()\n"
        "\n"
        "if(@HYDROGEN_HAS_TESTING@)\n"
        "    find_dependency(GTest REQUIRED)\n"
        "endif()\n"
        "\n"
    )
    
    # Add target import logic
    file(APPEND ${config_file}
        "# Import targets\n"
        "if(NOT TARGET ${HYDROGEN_NAMESPACE}Core)\n"
        "    include(\"\${CMAKE_CURRENT_LIST_DIR}/${HYDROGEN_EXPORT_NAME}Targets.cmake\")\n"
        "endif()\n"
        "\n"
        "# Verify targets were imported\n"
    )
    
    # Add target verification
    foreach(target ${exported_targets})
        get_property(export_name GLOBAL PROPERTY HYDROGEN_TARGET_${target}_EXPORT_NAME)
        file(APPEND ${config_file}
            "if(NOT TARGET ${HYDROGEN_NAMESPACE}${export_name})\n"
            "    message(FATAL_ERROR \"Target ${HYDROGEN_NAMESPACE}${export_name} not found\")\n"
            "endif()\n"
        )
    endforeach()
    
    # Add feature information
    file(APPEND ${config_file}
        "\n"
        "# Feature information\n"
        "set(${HYDROGEN_EXPORT_NAME}_SSL_SUPPORT @HYDROGEN_HAS_SSL@)\n"
        "set(${HYDROGEN_EXPORT_NAME}_COMPRESSION_SUPPORT @HYDROGEN_HAS_COMPRESSION@)\n"
        "set(${HYDROGEN_EXPORT_NAME}_LOGGING_SUPPORT @HYDROGEN_HAS_LOGGING@)\n"
        "set(${HYDROGEN_EXPORT_NAME}_WEBSOCKET_SUPPORT @HYDROGEN_HAS_WEBSOCKETS@)\n"
        "set(${HYDROGEN_EXPORT_NAME}_HTTP_SERVER_SUPPORT @HYDROGEN_HAS_HTTP_SERVER@)\n"
        "set(${HYDROGEN_EXPORT_NAME}_PYTHON_BINDINGS @HYDROGEN_HAS_PYTHON_BINDINGS@)\n"
        "set(${HYDROGEN_EXPORT_NAME}_TESTING_SUPPORT @HYDROGEN_HAS_TESTING@)\n"
        "\n"
        "# Component information\n"
        "set(${HYDROGEN_EXPORT_NAME}_COMPONENTS Core Server Client Device)\n"
        "\n"
        "# Success message\n"
        "message(STATUS \"Found ${HYDROGEN_EXPORT_NAME}: \${${HYDROGEN_EXPORT_NAME}_VERSION}\")\n"
    )
    
    # Configure the file with current values
    configure_package_config_file(
        ${config_file}
        "${CMAKE_CURRENT_BINARY_DIR}/${HYDROGEN_EXPORT_NAME}Config.cmake"
        INSTALL_DESTINATION ${HYDROGEN_CONFIG_INSTALL_DIR}
        PATH_VARS CMAKE_INSTALL_INCLUDEDIR CMAKE_INSTALL_LIBDIR
    )
    
    message(STATUS "Hydrogen: Generated package config file")
endfunction()

# Generate version file
function(hydrogen_generate_version_file)
    write_basic_package_version_file(
        "${CMAKE_CURRENT_BINARY_DIR}/${HYDROGEN_EXPORT_NAME}ConfigVersion.cmake"
        VERSION ${PROJECT_VERSION}
        COMPATIBILITY SameMajorVersion
    )
    
    message(STATUS "Hydrogen: Generated package version file")
endfunction()

# =============================================================================
# Component Config Files
# =============================================================================

# Generate component-specific config files
function(hydrogen_generate_component_configs)
    set(components Core Server Client Device)
    
    foreach(component ${components})
        set(component_config "${CMAKE_CURRENT_BINARY_DIR}/cmake/${HYDROGEN_EXPORT_NAME}${component}Config.cmake")
        
        file(WRITE ${component_config}
            "# ${HYDROGEN_EXPORT_NAME} ${component} Component Configuration\n"
            "# Generated by Hydrogen build system\n"
            "\n"
            "if(NOT TARGET ${HYDROGEN_NAMESPACE}${component})\n"
            "    message(FATAL_ERROR \"${HYDROGEN_EXPORT_NAME} ${component} component not found. Make sure to find_package(${HYDROGEN_EXPORT_NAME} COMPONENTS ${component})\")\n"
            "endif()\n"
            "\n"
            "set(${HYDROGEN_EXPORT_NAME}_${component}_FOUND TRUE)\n"
        )
        
        # Configure the component file
        configure_file(
            ${component_config}
            "${CMAKE_CURRENT_BINARY_DIR}/${HYDROGEN_EXPORT_NAME}${component}Config.cmake"
            @ONLY
        )
    endforeach()
    
    message(STATUS "Hydrogen: Generated component config files")
endfunction()

# =============================================================================
# Installation
# =============================================================================

# Install all export files
function(hydrogen_install_exports)
    # Install the targets export file
    install(EXPORT ${HYDROGEN_EXPORT_NAME}Targets
        FILE ${HYDROGEN_EXPORT_NAME}Targets.cmake
        NAMESPACE ${HYDROGEN_NAMESPACE}
        DESTINATION ${HYDROGEN_CONFIG_INSTALL_DIR}
        COMPONENT Development
    )
    
    # Install config files
    install(FILES
        "${CMAKE_CURRENT_BINARY_DIR}/${HYDROGEN_EXPORT_NAME}Config.cmake"
        "${CMAKE_CURRENT_BINARY_DIR}/${HYDROGEN_EXPORT_NAME}ConfigVersion.cmake"
        DESTINATION ${HYDROGEN_CONFIG_INSTALL_DIR}
        COMPONENT Development
    )
    
    # Install component config files
    set(components Core Server Client Device)
    foreach(component ${components})
        if(EXISTS "${CMAKE_CURRENT_BINARY_DIR}/${HYDROGEN_EXPORT_NAME}${component}Config.cmake")
            install(FILES
                "${CMAKE_CURRENT_BINARY_DIR}/${HYDROGEN_EXPORT_NAME}${component}Config.cmake"
                DESTINATION ${HYDROGEN_CONFIG_INSTALL_DIR}
                COMPONENT Development
            )
        endif()
    endforeach()
    
    message(STATUS "Hydrogen: Export installation configured")
endfunction()

# =============================================================================
# Main Export Function
# =============================================================================

# Complete export setup
function(hydrogen_setup_exports)
    message(STATUS "Hydrogen: Setting up package exports...")
    
    # Configure export settings
    hydrogen_configure_exports()
    
    # Generate config files
    hydrogen_generate_config_file()
    hydrogen_generate_version_file()
    hydrogen_generate_component_configs()
    
    # Setup installation
    hydrogen_install_exports()
    
    message(STATUS "Hydrogen: Package export setup complete")
endfunction()
